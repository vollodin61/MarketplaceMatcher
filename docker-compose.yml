services:
  postgres:
    image: postgres:16.3-alpine3.20
    container_name: postgres_db
    restart: always
    env_file:
      - .env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.24
    container_name: elasticsearch
    env_file:
      - .env
    environment:
      - discovery.type=single-node
      - node.name=elasticsearch
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms4g -Xmx4g"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - es_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    healthcheck:
      test: [ "CMD-SHELL", "curl -s http://localhost:9200/_cluster/health | grep green" ]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - backend

  app_service:
    build: .
    container_name: app_service
    command: [ "python", "main.py" ]
    env_file:
      - .env
    volumes:
      - .:/app_service
    depends_on:
      elasticsearch:
            condition: service_healthy
      postgres:
            condition: service_healthy
    ports:
      - "8000:8000"
    networks:
      - backend

volumes:
  postgres_data:
  es_data:

networks:
  backend:
    driver: bridge